name: Deploy to Production

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Build and Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: yourusername/restaurant-booking-app
          tags: latest, v${{ github.run_number }}
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/restaurant-booking-app
            echo "Pulling latest changes..."
            git pull
            
            echo "Pulling latest Docker images..."
            docker-compose pull
            
            echo "Stopping and removing existing containers..."
            docker-compose down
            
            echo "Starting new containers..."
            docker-compose up -d
            
            echo "Cleaning up old Docker images..."
            docker image prune -af --filter "until=24h"
            
            echo "Deployment completed successfully!"

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            echo "Verifying deployment status..."
            
            # Проверка статуса контейнеров
            CONTAINER_STATUS=$(docker-compose ps)
            
            if echo "$CONTAINER_STATUS" | grep -q "restaurant-app.*Up"; then
              echo "Application is running correctly."
            else
              echo "Error: Application container is not running properly!"
              exit 1
            fi
            
            # Проверка доступности по HTTP
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health)
            
            if [ "$response" == "200" ]; then
              echo "HTTP health check successful!"
            else
              echo "Error: HTTP health check failed with status code $response"
              exit 1
            fi

      - name: Send Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Production Deployment
          SLACK_MESSAGE: 'Deployment to Production server ${{ job.status }}'
          SLACK_FOOTER: 'Restaurant Booking App'